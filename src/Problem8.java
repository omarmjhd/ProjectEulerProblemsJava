/**
 *
 * Problem 8: The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 *
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 *
 * @author Omar Mujahid
 */
public class Problem8 {

    private static Long multiplicationHelper(char[] array, int beginIndex, int endIndex) {

        int[] intArray = new int[endIndex - beginIndex + 1];
        Long multiplication = 1L;

        for (int i = 0; i < endIndex - beginIndex + 1; i++) {

            intArray[i] = array[i];
            multiplication *= intArray[i];

        }

        return multiplication;

    }

    public static Long greatestProduct() {

        String num = "73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518" +
                "4385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576" +
                "6896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035" +
                "8907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733" +
                "3001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797" +
                "7846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440" +
                "3199890008895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912456" +
                "6529476545682848912883142607690042242190226710556263211111093705442175069416589604080719840385096245544" +
                "4362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754" +
                "100225698315520005593572972571636269561882670428252483600823257530420752963450";

        char[] digits = num.toCharArray();
        Long largest = 0L;

        for (int i = 0; i < 999; i++) {

            Long result = multiplicationHelper(digits, i, i + 12);
            //Something is wrong here, not sure what though lol

            if (result > largest) {



                largest = result;

            }

        }

        return largest;

    }

    public static void main(String[] args) {

        Problem8 p8 = new Problem8();

        System.out.println("The solution is: " + p8.greatestProduct());


    }
}
